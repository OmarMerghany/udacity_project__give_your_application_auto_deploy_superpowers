version: 2.1

commands:
  destroy_environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroying environment: <<parameters.workflow_id>> "
            aws cloudformation delete-stack --stack-name udapeople-backend-prod-<<parameters.workflow_id>>
            aws s3 rm s3://udapeople-prod-<<parameters.workflow_id>> --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-prod-<<parameters.workflow_id>>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            cd ~/project/backend
            if [[ -f "~/project/.circleci/outputs/db_migration_success" ]]; then
              npm i
              npm run migration:revert
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm i
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
              cd backend
              npm i
              npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: frontend test
          command: |
              cd frontend
              npm i
              npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: backend test
          command: |
              cd backend
              npm run test
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: frontend scan
          command: |
              cd frontend
              npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: backend scan
          command: |
              cd backend
              npm audit fix --audit-level=critical --force

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name udapeople-backend-prod-${CIRCLE_WORKFLOW_ID} \
              --parameter-overrides ID="prod-${CIRCLE_WORKFLOW_ID}"  
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name udapeople-frontend-prod-${CIRCLE_WORKFLOW_ID} \
              --parameter-overrides ID="prod-${CIRCLE_WORKFLOW_ID}"  
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            BACKEND_AWS_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-prod-${CIRCLE_WORKFLOW_ID}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            echo "http://$BACKEND_AWS_PUBLIC_IP:3030" >> .circleci/outputs/backend_url.txt
            echo "http://$BACKEND_AWS_PUBLIC_IP:3030" >> ~/output.txt
            echo "$BACKEND_AWS_PUBLIC_IP" >> .circleci/ansible/inventory.txt
            cat .circleci/outputs/backend_url.txt
      - run: yum -y install tar gzip
      - persist_to_workspace:
          root: ~/
          paths:
            - .circleci/outputs/backend_url.txt
            - project/.circleci/ansible/inventory.txt
            - ~/output.txt
      - destroy_environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID}"      

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["29:46:04:9c:65:1e:1c:d1:0e:8a:65:0a:c1:7c:f1:11"]
      - attach_workspace:
          at: ~/
      - run: 
          name: Install dependencies
          command: |
            apk add --update ansible # install the dependencies needed
      - run: 
          name: Configure server
          command: |
            pwd
            cat .circleci/ansible/inventory.txt
            ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml
      - destroy_environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID}"      

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run build
            npm run migrations >> migration_output.txt
            cat migration_output.txt
      - run:
          name: Store migration result in a file.
          command: |
            cd backend
            if grep -q "has been executed successfully." migration_output.txt
            then
              touch ~/project/.circleci/outputs/db_migration_success
            fi
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/outputs/
      - destroy_environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID}"

  deploy-frontend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update curl nodejs npm
            apk add --update curl tar
            pip install awscli
      - run:
          name: Get backend url
          command: |
            pwd
            ls .circleci/outputs/
            cat .circleci/outputs/backend_url.txt
            ls .circleci/ansible/
            cat .circleci/ansible/inventory.txt
            ls ~/project/.circleci/outputs/
            cat ~/project/.circleci/outputs/backend_url.txt
            export API_URL=`cat .circleci/outputs/backend_url.txt`
            echo "API_URL: $API_URL"
      - run:
          name: Deploy frontend objects
          command: |
            cd ~/project/frontend
            npm i
            npm install typescript@rc
            npm run build
      - run:
          name: Copy frontend to s3 bucket.
          command: |
            cd ~/project/frontend
            aws s3 cp dist s3://udapeople-prod-${CIRCLE_WORKFLOW_ID} --recursive
      - persist_to_workspace:
          root: ~/
          paths:
            - project/frontend/dist
      - destroy_environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID}"
      - revert-migrations     
                    
  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["29:46:04:9c:65:1e:1c:d1:0e:8a:65:0a:c1:7c:f1:11"]
      - attach_workspace:
          at: ~/
      - run: 
          name: Install dependencies
          command: |
            apk add --update curl nodejs npm
            apk add --update ansible zip
            pip install awscli
      - run:
          name: Build backend app
          command: |
            cd ~/project/backend
            npm i
            npm run build
            cd dist
            cp ../package.json .
            zip -rq dist.zip *
            mkdir -p ~/project/.circleci/ansible/roles/deploy/files/
            mv dist.zip ~/project/.circleci/ansible/roles/deploy/files/
      - run:
          name: Deploy backend Setup EC2 instance & copy compiled backend to the EC2 instance
          command: |
            ls ~/project/.circleci/ansible/roles/deploy/files/
            cd ~/project/backend
            ansible-galaxy install weareinteractive.environment
            cat ~/project/.circleci/ansible/inventory.txt
            ansible-playbook -i ~/project/.circleci/ansible/inventory.txt ~/project/.circleci/ansible/deploy-backend.yml
      - destroy_environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID}"
      - revert-migrations 


  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update curl
            pip install awscli
      - run:
          name: Get backend url
          command: |
            pwd
            ls ~/project/.circleci/outputs/
            cat ~/project/.circleci/outputs/backend_url.txt
            ls ~/project/.circleci/ansible/
            cat ~/project/.circleci/ansible/inventory.txt
            ls .circleci/ansible/
            cat .circleci/ansible/inventory.txt
            cat ~/output.txt
            export API_URL=`cat .circleci/outputs/backend_url.txt`
            echo "API_URL: $API_URL"
            export API_URL=`cat ~/output.txt`
            echo "API_URL: $API_URL"
      - run:
          name: Backend smoke test.
          command: |
            curl -s $API_URL/api/status
      - run:
          name: Frontend smoke test.
          command: |
            if curl -s http://udapeople-prod-${CIRCLE_WORKFLOW_ID:0:7}.s3-website.us-west-2.amazonaws.com/ | grep "Welcome"
            then
            return 0
            else
            return 1
            fi
      - destroy_environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID}"
      - revert-migrations  

  # cloudfront-update:
  #   docker:
  #     - image: amazon/aws-cli
  #   steps:
  #     - checkout
  #     - attach_workspace:
  #         at: ~/
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           # your code here
  #     - run:
  #         name: Update cloudfront distribution
  #         command: |
  #           OLD_WORKFLOW_ID=$(aws cloudformation \
  #             list-exports --query "Exports[?Name==\`UdapeopleWorkflowID\`].Value" \
  #             --no-paginate --output text)
  #           echo "OLD_WORKFLOW_ID: $OLD_WORKFLOW_ID."
  #           export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
  #             --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
  #           printf '%s\n' "${STACKS[@]}"
  #           aws cloudformation deploy \
  #             --template-file .circleci/files/cloudfront.yml \
  #             --parameter-overrides workflow_id="prod-${CIRCLE_WORKFLOW_ID}" \
  #             --stack-name udapeople-prod-cloudfront
  #           if printf '%s\n' "${STACKS[@]}" | grep -q "$OLD_WORKFLOW_ID"; then
  #             echo "Removing previous stack"
  #             aws s3 rm "s3://udapeople-${OLD_WORKFLOW_ID}" --recursive
  #             aws cloudformation delete-stack --stack-name "udapeople-backend-${OLD_WORKFLOW_ID}"
  #             aws cloudformation delete-stack --stack-name "udapeople-frontend-${OLD_WORKFLOW_ID}"
  #           fi

      # Here's where you will add some code to rollback on failure  

# cleanup:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi
            
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      #     filters:
      #       branches:
      #         only: [test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]